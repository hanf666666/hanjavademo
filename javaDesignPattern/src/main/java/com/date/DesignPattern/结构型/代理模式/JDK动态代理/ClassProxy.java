package com.date.DesignPattern.结构型.代理模式.JDK动态代理;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

/**
 * 1????:
 * 1.???????????ProductService ??jdk?????????InvocationHandler
 * 2????
 * 1.???????????ProductService ??jdk????????? ???????????Proxy
 *
 */
public class ClassProxy implements InvocationHandler{
    Object targetService;

    public ClassProxy(Object targetService) {
        this.targetService=targetService;

    }


    // 2???????????????????
    public Object createProxy() {
        //???????
        //?????
        //???????,???????
        return Proxy.newProxyInstance(targetService.getClass().getClassLoader(),
                targetService.getClass().getInterfaces(), this);
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

        System.out.println("????????" + method.getName() + "???????????...");
        return method.invoke(targetService, args);
    }




}
