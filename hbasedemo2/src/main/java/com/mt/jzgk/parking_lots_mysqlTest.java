package com.mt.jzgk;

import cn.hutool.core.date.DateTime;
import cn.hutool.core.date.DateUnit;
import cn.hutool.core.date.DateUtil;
import com.print.utils.HBaseUtil;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.HashMap;
import java.util.stream.Stream;

/**
 * to do
 *
 * @author Hj
 * @date 2021/12/2
 */
public class parking_lots_mysqlTest {
    public HBaseUtil hBaseUtil = null;

    @Before
    public void before() {
        hBaseUtil = new HBaseUtil();
    }

    @Test
    public void getTables() {
        final TableName[] tables = hBaseUtil.getTables();
        for (TableName table : tables) {
            System.out.println(new String(table.getName()));

        }
    }

    @Test
    public void getfasdferList() {
        final DateTime starttime = DateUtil.date();
        final ResultScanner bigdata003_parking_lot2ResultScanner = hBaseUtil.getPrefixFilterGetData("bigdata003_parking_lot2", "");
        int i = 1;
        HashMap<String, String> hashMap = new HashMap<String, String>();
        for (Result result : bigdata003_parking_lot2ResultScanner) {
            final String s = new String(result.getRow()).split("_")[0];
//                System.out.println(i++ + "==>scan:  " +s);
            if (hashMap.containsKey(s)) {
                hashMap.put(s, hashMap.get(s) + "," + new String(result.getRow()));
            } else {
                hashMap.put(s, new String(result.getRow()));
            }

        }
        int chongfu = 1;
        for (String key : hashMap.keySet()) {
            if (hashMap.get(key).contains(",")) {
                System.out.println(chongfu++ + "==>" + key + "====>" + hashMap.get(key));
            }
        }
        final DateTime endtime = DateUtil.date();
        System.out.println("ÏìÓ¦Ê±¼ä==>" + DateUtil.between(starttime, endtime, DateUnit.MS) + "ms");

    }


    @Test
    public void getfasdferList2() {
        DateTime starttime = DateUtil.date();

        ResultScanner bigdata003_parking_lot3ResultScanner = hBaseUtil.getRowData("bigdata003_parking_lot2");

        int i = 0;
        HashMap<String, Result> hashMap = new HashMap<String, Result>();
        for (Result result : bigdata003_parking_lot3ResultScanner) {
//            System.out.println(i++);
            i++;
//            final String parkid = new String(result.getRow()).split("_")[0];
            final String parkid = new String(result.getRow());
            hashMap.put(parkid, result);

        }
        System.out.println(i);
        int chongfu = 1;
        String str860 = "15_1,28_1,142_2,648_1,649_2,932_1,1495_1,1516_1,1532_1,1536_1,1542_1,1543_1,1544_1,1545_1,1546_1,1547_1,1548_1,1549_1,1550_1,1551_1,1552_1,1553_1,1554_1,1555_1,1556_1,1557_1,1558_1,1559_1,1560_2,1561_2,1564_1,1569_1,1573_1,1575_1,1576_1,1590_1,1603_1,1604_1,1605_2,1607_1,1609_1,1611_2,1633_1,1634_1,1635_1,1636_1,1637_1,1638_1,1639_1,1640_1,1641_1,1642_1,1643_1,1645_2,1646_2,1651_2,1653_1,19001_1,19002_1,19003_1,19004_1,19006_1,19007_1,19008_1,19009_1,19010_1,19011_1,19012_1,19013_1,19014_1,19015_1,19016_1,19017_1,19018_1,19019_1,19020_1,19021_1,19022_1,19023_1,19024_1,19025_1,19026_1,19027_1,19028_1,19029_1,19030_1,19031_1,19032_1,19033_1,19034_1,19035_1,19036_1,19037_1,19038_1,19039_1,19040_1,19041_1,19042_1,19043_1,19044_1,19045_1,19046_1,19047_1,19048_1,19049_2,19082_2,19083_2,19084_1,19085_1,19086_1,19087_1,19092_1,19093_1,19094_1,19095_1,19096_1,19097_1,19098_1,19099_1,19100_1,19102_1,19103_1,19104_1,19105_1,19106_1,19107_1,19108_1,19109_1,19110_1,19111_1,19112_1,19113_1,19114_1,19115_1,19116_1,19117_1,19118_1,19119_1,19120_1,19121_1,19122_1,19123_1,19124_1,19125_1,19126_1,19127_1,19128_1,19129_1,19130_1,19131_1,19133_1,19134_1,19135_1,19136_1,19137_1,19138_1,19139_1,19140_1,19141_1,19145_1,19146_1,19147_1,19148_1,19149_1,19150_1,19151_1,19152_1,19153_1,19154_1,19155_1,19156_1,19157_1,19158_1,19164_1,19165_1,19166_1,19167_1,19168_1,19169_1,19170_1,19171_1,19172_2,19173_1,19174_1,19175_1,19176_1,19177_1,19178_1,19179_1,19180_1,19181_1,19182_1,19183_1,19184_1,19185_1,19186_1,19187_1,19188_1,19189_1,19190_1,19191_1,19192_1,19193_1,19194_1,19195_1,19196_1,19197_1,19198_1,19199_1,19200_1,19201_1,19202_1,19203_1,19204_1,19205_1,19206_1,19207_1,19208_1,19209_1,19210_1,19211_1,19212_1,19213_1,19214_1,19215_1,19216_1,19217_1,19218_1,19219_1,19220_1,19221_1,19222_1,19223_1,19224_1,19225_1,19226_1,19227_1,19228_1,19229_1,19230_1,19231_1,19232_1,19233_1,19234_1,19235_1,19236_1,19237_1,19238_1,19239_1,19240_1,19241_1,19242_1,19243_1,19244_1,19245_1,19247_1,19248_1,19249_1,19250_1,19251_1,19252_1,19253_1,19254_1,19255_1,19256_1,19257_1,19258_1,19259_1,19260_2,19261_1,19262_1,19265_1,19266_1,19270_1,19271_1,19272_2,19278_2,19279_2,19285_1,19286_1,19287_2,19289_1,19293_2,19294_2,19295_2,19296_2,19297_2,19301_1,19304_1,19305_1,19306_1,19307_1,19308_1,19309_1,19310_1,19311_1,19312_1,19314_1,19316_1,19317_1,19318_1,19327_1,19328_2,19329_2,19332_2,19333_2,19334_2,19335_2,19337_2,19339_2,19340_2,19342_1,19343_1,19344_1,19345_1,19352_1,19354_1,19355_1,19356_1,19357_1,19358_1,19360_1,19361_1,19363_1,19364_1,19365_1,19366_1,19367_1,19371_1,19372_1,19373_1,19374_1,19375_1,19376_1,19377_1,19378_1,19380_1,19381_1,19382_1,19383_1,19384_1,19385_1,19387_1,19388_1,19389_1,19390_1,19391_1,19392_1,19393_1,19394_1,19395_1,19396_1,19397_1,19398_1,19399_1,19400_1,19401_1,19402_1,19408_1,19409_1,19410_1,19412_1,19413_1,19414_1,19415_1,19416_1,19417_1,19418_1,19419_1,19420_1,19421_1,19422_1,19423_1,19424_1,19425_1,19426_1,19427_1,19428_1,19429_1,19430_1,19431_1,19432_1,19433_1,19434_1,19435_1,19436_1,19437_1,19438_1,19439_1,19440_1,19441_1,19442_1,19443_1,19444_1,19445_1,19446_1,19447_1,19448_1,19449_1,19450_1,19451_1,19452_1,19453_1,19454_1,19455_1,19456_1,19457_1,19458_1,19459_1,19460_1,19461_1,19462_1,19463_1,19464_1,19465_1,19466_1,19467_1,19468_1,19469_1,19470_1,19471_1,19472_1,19473_1,19474_1,19475_1,19476_1,19477_1,19478_1,19479_1,19480_1,19481_1,19482_1,19483_1,19484_1,19485_1,19486_1,19487_1,19488_1,19489_1,19490_1,19491_1,19492_1,19493_1,19494_1,19495_1,19496_1,19497_1,19498_1,19499_1,19500_1,19501_1,19502_1,19503_1,19504_1,19505_1,19506_1,19507_1,19508_1,19509_1,19510_1,19511_1,19512_1,19513_1,19514_1,19515_1,19516_1,19517_1,19518_1,19519_1,19520_1,19521_1,19522_1,19523_1,19524_1,19525_1,19526_1,19527_1,19529_1,19530_1,19531_2,19532_2,19533_1,19535_1,19536_2,19538_2,19539_1,19540_1,19541_1,19542_1,19543_1,19544_1,19545_1,19546_1,19547_1,19548_1,19549_1,19550_1,19551_1,19553_1,19554_1,19555_1,19556_1,19557_1,19560_1,19561_1,19562_1,19563_1,19564_1,19565_1,19566_1,19567_1,19568_1,19569_1,19570_1,19571_1,19572_1,19573_1,19574_1,19575_1,19576_1,19577_1,19578_1,19579_1,19580_1,19581_1,19582_1,19583_1,19584_1,19585_1,19587_2,19588_1,19589_1,19590_1,19591_1,19592_1,19593_1,19594_1,19595_1,19596_1,19597_1,19598_1,19599_1,19600_1,19601_1,19602_1,19603_1,19604_1,19605_1,19606_1,19607_1,19608_1,19609_1,19610_1,19611_1,19612_1,19613_1,19614_1,19615_1,19616_1,19617_1,19618_1,19619_1,19620_1,19621_1,19622_1,19623_1,19624_1,19625_1,19626_1,19627_1,19628_1,19629_1,19630_1,19631_1,19632_1,19633_1,19634_1,19635_1,19636_1,19637_1,19639_1,19640_1,19641_1,19642_1,19643_1,19644_1,19645_1,19646_1,19647_1,19648_1,19649_1,19650_1,19651_1,19652_1,19653_1,19654_1,19655_2,19656_1,19657_1,19658_1,19659_1,19660_1,19661_1,19662_1,19663_2,19664_1,19665_1,19666_1,19667_1,19668_1,19669_1,19670_1,19671_1,19672_1,19673_1,19674_1,19675_2,19676_2,19677_2,19678_1,19679_2,19680_1,19681_1,19682_1,19683_2,19684_2,19685_2,19686_1,19687_1,19688_1,19689_1,19690_1,19691_1,19692_1,19693_1,19694_1,19695_1,19696_2,19699_1,19700_1,19701_1,19702_1,19703_1,19704_1,19705_1,19706_1,19707_1,19708_1,19709_2,19710_2,19711_2,19712_1,19713_1,19714_1,19715_1,19716_1,19717_1,19718_1,19719_1,19720_1,19721_1,19722_1,19723_1,19724_1,19725_1,19726_1,19727_1,19728_1,19729_1,19730_1,19731_1,19732_1,19733_1,19734_1,19735_1,19736_1,19737_1,19738_1,19739_1,19740_1,19741_1,19742_1,19743_1,19744_1,19745_1,19746_1,19747_1,19748_1,19749_1,19750_1,19751_1,19752_1,19753_1,19754_1,19755_1,19756_1,19757_1,19758_1,19759_2,19760_1,19761_1,19762_1,19763_2,19764_1,19765_1,19766_1,19767_2,19768_2,19769_2,19770_2,19771_1,19772_2,19773_2,19774_2,19775_2,19776_2,19777_2,19778_2,19779_2,19780_2,19781_2,19782_2,19783_2,19784_2,19785_2,19786_2,19787_2,19788_2,19789_2,19790_2,19791_2,19792_2,19793_2,19794_2,19795_2,19796_2,19797_2,19798_2,19799_2,19800_2,19801_2,19802_2,19803_2,19804_2,19805_2,19806_2,19807_2,19808_2,19809_2,19810_2,19811_2,19812_2,19813_2,19814_2,19815_2,19816_2,19817_2,19818_2,19819_2,19820_2,19821_2,19822_2,19823_2,19824_2,19825_2,19826_2,19827_2,19828_2,19829_2,19830_2,19831_2,19832_2,19833_2,19834_2,19835_2,19836_2,19837_2,19838_2,19839_2,19840_2,19841_2,19842_2,19843_2,19844_2,19845_2,19846_2,19847_1,19848_1,19849_1,19850_1,19851_1,19852_1,19853_1,19854_1,19855_1,19856_1,19857_1,19858_1,19859_1,19860_1,19861_1,19862_1,19863_1,19864_1,19865_1,19866_1,19867_1,19868_1,19869_1,19870_1,19871_1,19872_1,19873_1,19874_1,19875_1,19876_1,19877_1,19878_1,19879_1,19880_1,19881_2,19882_2,19883_2,19884_2,19885_2,19886_2,19887_2,19888_2,19889_2,19890_2,19891_2,19892_2,19893_2,19894_1,19895_2,19896_2,19897_2,19898_2,19899_2,19900_2,19901_2,19902_2,19903_2,19904_2,19905_2,19906_2,19907_2,19908_2,19909_2,19910_1,19911_1,19912_2,19913_2,19914_2,19915_2,19916_1,19917_2,19918_2,19919_2,19920_2,19921_2,19922_2,19923_2,19924_2,19925_2,19926_2,19927_2,19928_2,19929_2,19930_2,19931_2,19932_2,19933_2,19934_2,19935_2,19936_2";
        Stream<String> parkidstream = Arrays.asList(str860.split(",")).stream();
        for (String key : hashMap.keySet()) {
            parkidstream = parkidstream.filter((s) -> !s.equals(key));
            parkidstream = parkidstream.filter((s) -> s.contains("_2"));
        }
        System.out.println("=============================================>");
        parkidstream.forEach(System.out::println);
        System.out.println("<=============================================");

        final DateTime endtime = DateUtil.date();
        System.out.println("ÏìÓ¦Ê±¼ä==>" + DateUtil.between(starttime, endtime, DateUnit.MS) + "ms");

    }

}
