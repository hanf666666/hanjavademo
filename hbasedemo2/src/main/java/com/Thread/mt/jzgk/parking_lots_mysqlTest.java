package com.Thread.mt.jzgk;

import cn.hutool.core.date.DateTime;
import cn.hutool.core.date.DateUnit;
import cn.hutool.core.date.DateUtil;
import com.Thread.utils.HBaseUtil;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.ResultScanner;
import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.HashMap;
import java.util.stream.Stream;

/**
 * to do
 *
 * @author Hj
 * @date 2021/12/2
 */
public class parking_lots_mysqlTest {
    public HBaseUtil hBaseUtil = null;

    @Before
    public void before() {
        hBaseUtil = new HBaseUtil();
    }

    @Test
    public void getTables() {
        final TableName[] tables = hBaseUtil.getTables();
        for (TableName table : tables) {
            System.out.println(new String(table.getName()));

        }
    }

    @Test
    public void getfasdferList() {
        final DateTime starttime = DateUtil.date();
        final ResultScanner bigdata003_parking_lot2ResultScanner = hBaseUtil.getPrefixFilterGetData("bigdata003_parking_lot2", "");
        int i = 1;
        HashMap<String, String> hashMap = new HashMap<String, String>();
        for (Result result : bigdata003_parking_lot2ResultScanner) {
            final String s = new String(result.getRow()).split("_")[0];
//                System.out.println(i++ + "==>scan:  " +s);
            if (hashMap.containsKey(s)) {
                hashMap.put(s, hashMap.get(s) + "," + new String(result.getRow()));
            } else {
                hashMap.put(s, new String(result.getRow()));
            }

        }
        int chongfu = 1;
        for (String key : hashMap.keySet()) {
            if (hashMap.get(key).contains(",")) {
                System.out.println(chongfu++ + "==>" + key + "====>" + hashMap.get(key));
            }
        }
        final DateTime endtime = DateUtil.date();
        System.out.println("响应时间==>" + DateUtil.between(starttime, endtime, DateUnit.MS) + "ms");

    }


    @Test
    public void getfasdferList2() {
        DateTime starttime = DateUtil.date();

        ResultScanner bigdata003_parking_lot3ResultScanner = hBaseUtil.getRowData("bigdata003_parking_lot2");

        int i = 0;
        HashMap<String, Result> hashMap = new HashMap<String, Result>();
        for (Result result : bigdata003_parking_lot3ResultScanner) {
//            System.out.println(i++);
            i++;
            final String parkid = new String(result.getRow()).split("_")[0];
            hashMap.put(parkid, result);

        }
        System.out.println(i);
        int chongfu = 1;
        String str860 = ",15,28,648,932,1495,1516,1532,1536,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1564,1569,1573,1575,1576,1590,1603,1604,1607,1609,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1645,1646,1651,1653,19001,19002,19003,19004,19006,19007,19008,19009,19010,19011,19012,19013,19014,19015,19016,19017,19018,19019,19020,19021,19022,19023,19024,19025,19026,19027,19028,19029,19030,19031,19032,19033,19034,19035,19036,19037,19038,19039,19040,19041,19042,19043,19044,19045,19046,19047,19048,19082,19084,19085,19086,19087,19092,19093,19094,19095,19096,19097,19098,19099,19100,19102,19103,19104,19105,19106,19107,19108,19109,19110,19111,19112,19113,19114,19115,19116,19117,19118,19119,19120,19121,19122,19123,19124,19125,19126,19127,19128,19129,19130,19131,19133,19134,19135,19136,19137,19138,19139,19140,19141,19145,19146,19147,19148,19149,19150,19151,19152,19153,19154,19155,19156,19157,19158,19164,19165,19166,19167,19168,19169,19170,19171,19173,19174,19175,19176,19177,19178,19179,19180,19181,19182,19183,19184,19185,19186,19187,19188,19189,19190,19191,19192,19193,19194,19195,19196,19197,19198,19199,19200,19201,19202,19203,19204,19205,19206,19207,19208,19209,19210,19211,19212,19213,19214,19215,19216,19217,19218,19219,19220,19221,19222,19223,19224,19225,19226,19227,19228,19229,19230,19231,19232,19233,19234,19235,19236,19237,19238,19239,19240,19241,19242,19243,19244,19245,19247,19248,19249,19250,19251,19252,19253,19254,19255,19256,19257,19258,19259,19261,19262,19265,19266,19270,19271,19278,19285,19294,19295,19296,19297,19301,19304,19305,19306,19307,19308,19309,19310,19311,19312,19314,19316,19317,19318,19327,19328,19329,19332,19333,19334,19335,19337,19339,19340,19342,19343,19344,19345,19352,19354,19355,19356,19357,19358,19360,19361,19363,19364,19365,19366,19367,19371,19372,19373,19374,19375,19376,19377,19378,19380,19381,19382,19383,19384,19385,19387,19388,19389,19390,19391,19392,19393,19394,19395,19396,19397,19398,19399,19400,19401,19402,19408,19409,19410,19412,19413,19414,19415,19416,19417,19418,19419,19420,19421,19422,19423,19424,19425,19426,19427,19428,19429,19430,19431,19432,19433,19434,19435,19436,19437,19438,19439,19440,19441,19442,19443,19444,19445,19446,19447,19448,19449,19450,19451,19452,19453,19454,19455,19456,19457,19458,19459,19460,19461,19462,19463,19464,19465,19466,19467,19468,19469,19470,19471,19472,19473,19474,19475,19476,19477,19478,19479,19480,19481,19482,19483,19484,19485,19486,19487,19488,19489,19490,19491,19492,19493,19494,19495,19496,19497,19498,19499,19500,19501,19502,19503,19504,19505,19506,19507,19508,19509,19510,19511,19512,19513,19514,19515,19516,19517,19518,19519,19520,19521,19522,19523,19524,19525,19526,19527,19529,19530,19531,19532,19533,19535,19536,19538,19539,19540,19541,19542,19543,19544,19545,19546,19547,19548,19549,19550,19551,19553,19554,19555,19556,19557,19560,19561,19562,19563,19564,19565,19566,19567,19568,19569,19570,19571,19572,19573,19574,19575,19576,19577,19578,19579,19580,19581,19582,19583,19584,19585,19587,19588,19589,19590,19591,19592,19593,19594,19595,19596,19597,19598,19599,19600,19601,19602,19603,19604,19605,19606,19607,19608,19609,19610,19611,19612,19613,19614,19615,19616,19617,19618,19619,19620,19621,19622,19623,19624,19625,19626,19627,19628,19629,19630,19631,19632,19633,19634,19635,19636,19637,19639,19640,19641,19642,19643,19644,19645,19646,19647,19648,19649,19650,19651,19652,19653,19654,19655,19656,19657,19658,19659,19660,19661,19662,19663,19664,19665,19666,19667,19668,19669,19670,19671,19672,19673,19674,19675,19676,19677,19678,19679,19680,19681,19682,19683,19684,19685,19686,19687,19688,19689,19690,19691,19692,19693,19694,19695,19696,19699,19700,19701,19702,19703,19704,19705,19706,19707,19708,19709,19710,19711,19712,19713,19714,19715,19716,19717,19718,19719,19720,19721,19722,19723,19724,19725,19726,19727,19728,19729,19730,19731,19732,19733,19734,19735,19736,19737,19738,19739,19740,19741,19742,19743,19744,19745,19746,19747,19748,19749,19750,19751,19752,19753,19754,19755,19756,19757,19758,19759,19760,19761,19762,19763,19764,19765,19766,19767,19768,19769,19770,19771,19772,19773,19774,19775,19776,19777,19778,19779,19780,19781,19782,19783,19784,19785,19786,19787,19788,19789,19790,19791,19792,19793,19794,19795,19796,19797,19798,19799,19800,19801,19802,19803,19804,19805,19806,19807,19808,19809,19810,19811,19812,19813,19814,19815,19816,19817,19818,19819,19820,19821,19822,19823,19824,19825,19826,19827,19828,19829,19830,19831,19832,19833,19834,19835,19836,19837,19838,19839,19840,19841,19842,19843,19844,19845,19846,19847,19848,19849,19850,19851,19852,19853,19854,19855,19856,19857,19858,19859,19860,19861,19862,19863,19864,19865,19866,19867,19868,19869,19870,19871,19872,19873,19874,19875,19876,19877,19878,19879,19880,19881,19882,19883,19884,19885,19886,19887,19888,19889,19890,19891,19892,19893,19894,19895,19896,19897,19898,19899,19900,19901,19902,19903,19904,19905,19906,19907,19908,19909,19910,19911,19912,19913,19914,19915,19916,19917,19918,19919,19920,19921,19922,19923,19924,19925,19926,19927,19928,19929,19930,19931,19932,19933,19934,19935,19936,";
        Stream<String> parkidstream = Arrays.asList(str860.split(",")).stream();
        for (String key : hashMap.keySet()) {
            parkidstream = parkidstream.filter((s) -> !s.equals(key));
        }
        System.out.println("=============================================");
        parkidstream.forEach(System.out::println);
        System.out.println("=============================================");

        final DateTime endtime = DateUtil.date();
        System.out.println("响应时间==>" + DateUtil.between(starttime, endtime, DateUnit.MS) + "ms");

    }

}
